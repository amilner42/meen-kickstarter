{"version":3,"sources":["../../../tests/validifier.test.js"],"names":["describe","it","equal","undefined","validPhoneNumbers","map","validPhoneNumber","invalidEmails","email","invalidEmail","validEmails","invalidMongoIDs","invalidMongoID","validMongoIDs","aValidMongoID"],"mappings":"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","file":"validifier.test.js","sourcesContent":["import assert from 'assert';\nimport R from \"ramda\";\nimport { validPhone, validEmail, validPassword, validMongoID } from '../src/validifier';\ndescribe('Validifier', function () {\n    describe('#validPhone', function () {\n        it('should return false if the email is undefined', function () {\n            assert.equal(false, validPhone(undefined));\n        });\n        it('should return false if the email is null', function () {\n            assert.equal(false, validPhone(null));\n        });\n        it('should return false if the phone number contains a char', function () {\n            assert.equal(false, validPhone(\"604343a232\"));\n        });\n        it('should return false if the phone number is 1 char', function () {\n            assert.equal(false, validPhone(\"1\"));\n        });\n        it('should return true if a valid phone number is passed', function () {\n            const validPhoneNumbers = [\"6049822922\", \"23222\", \"123456789012345\"];\n            R.map((validPhoneNumber) => {\n                assert.equal(true, validPhone(validPhoneNumber));\n            }, validPhoneNumbers);\n        });\n        it('should return false if a phone number is longer than 15 chars', function () {\n            assert.equal(false, validPhone(\"1234567890123456\"));\n        });\n    });\n    describe('#validEmail', function () {\n        it('should return false if the email is undefined', function () {\n            assert.equal(false, validEmail(undefined));\n        });\n        it('should return false if the email is null', function () {\n            assert.equal(false, validEmail(null));\n        });\n        it('should return false if the email has no @', function () {\n            const invalidEmails = [\"asdf\", \"asdf.gmail.com\", \"asdfATgmail.com\"];\n            R.map((email) => {\n                assert.equal(false, validEmail(email));\n            }, invalidEmails);\n        });\n        it('should return false if the email ends with an @', function () {\n            const invalidEmail = \"bla@\";\n            assert.equal(false, validEmail(invalidEmail));\n        });\n        it('should return false if the email starts with an @', function () {\n            const invalidEmail = \"@gmail.com\";\n            assert.equal(false, validEmail(invalidEmail));\n        });\n        it('should return true for valid emails', function () {\n            const validEmails = [\"bla@gmail.com\", \"bilbo@yahoo.ca\", \"what_what@b.ca\"];\n            R.map((email) => {\n                assert.equal(true, validEmail(email));\n            }, validEmails);\n        });\n    });\n    describe('#validPassword', function () {\n        it('should return false if the password is undefined', function () {\n            assert.equal(false, validPassword(undefined));\n        });\n        it('should return false if the password is null', function () {\n            assert.equal(false, validPassword(null));\n        });\n        it('should return false if the password is <= 6 chars', function () {\n            assert.equal(false, validPassword(\"123456\"));\n        });\n    });\n    describe('#validMongoID', function () {\n        it('should return false if the ID is undefined', function () {\n            assert.equal(false, validMongoID(undefined));\n        });\n        it('should return false if the ID is null', function () {\n            assert.equal(false, validMongoID(null));\n        });\n        it('should return false if the ID is not 24 hex chars', function () {\n            const invalidMongoIDs = [\"23\", \"12345678901234567890123-\", \"12345678901234567890123G\"];\n            R.map((invalidMongoID) => {\n                assert.equal(false, validMongoID(invalidMongoID));\n            }, invalidMongoIDs);\n        });\n        it('should return true if the ID is 24 hex chars ', function () {\n            const validMongoIDs = [\"123456789012345678901234\", \"12a456F890a2345d78901234\"];\n            R.map((aValidMongoID) => {\n                assert.equal(true, validMongoID(aValidMongoID));\n            }, validMongoIDs);\n        });\n    });\n});\n"]}