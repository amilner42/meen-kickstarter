{"version":3,"sources":["../../../src/server.js"],"names":["MONGO_STORE","createExpressServer","server","setUpPassport","serializeUser","user","done","_id","deserializeUser","id","then","Users","findOne","User","message","catch","err","use","initialize","session","json","allowCrossDomain","req","res","next","header","method","send","saveUninitialized","resave","store","url","db","secret","app","expressSessionSecretKey","cookie","httpOnly","isHttps","maxAge","secondsBeforeReloginNeeded","name","expressSessionCookieName","static","all","path","isAuthenticated","status","errorCode","apiUrl","handlers","apiUrlWithPrefix","apiSuffix","handler","get","sendFile","resolve","__dirname"],"mappings":"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","file":"server.js","sourcesContent":["import bodyParser from 'body-parser';\nimport express from 'express';\nimport expressSession from 'express-session';\nimport sessionStore from 'connect-mongo';\nimport path from 'path';\nimport { toPairs, contains, map } from 'ramda';\nimport passport from 'passport';\nimport { APP_CONFIG } from '../app-config';\nimport { ID, collection } from './db';\nimport { loginStrategy, signUpStrategy } from './passport-local-auth-strategies';\nimport { apiAuthlessRoutes, routes } from './routes';\nconst MONGO_STORE = sessionStore(expressSession);\nconst createExpressServer = () => {\n    const server = express();\n    const setUpPassport = () => {\n        passport.serializeUser(function (user, done) {\n            done(null, user._id);\n        });\n        passport.deserializeUser(function (id, done) {\n            collection(\"users\")\n                .then((Users) => Users.findOne({ \"_id\": ID(id) }))\n                .then((User) => {\n                if (!User)\n                    return done(null, false, { message: \"User \" + id + \" does not exist\" });\n                done(null, User);\n            })\n                .catch((err) => done(err));\n        });\n        passport.use('sign-up', signUpStrategy);\n        passport.use('login', loginStrategy);\n        server.use(passport.initialize());\n        server.use(passport.session());\n    };\n    server.use(bodyParser.json());\n    server.use(function allowCrossDomain(req, res, next) {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n        ('OPTIONS' === req.method) ? res.send(200) : next();\n    });\n    server.use(expressSession({\n        saveUninitialized: true,\n        resave: false,\n        store: new MONGO_STORE({ url: APP_CONFIG.db.url }),\n        secret: APP_CONFIG.app.expressSessionSecretKey,\n        cookie: {\n            httpOnly: !APP_CONFIG.app.isHttps,\n            maxAge: APP_CONFIG.app.secondsBeforeReloginNeeded\n        },\n        name: APP_CONFIG.app.expressSessionCookieName\n    }));\n    server.use(express.static('./frontend/dist'));\n    setUpPassport();\n    server.all(\"/api/*\", (req, res, next) => {\n        if (!contains(req.path, apiAuthlessRoutes)) {\n            if (req.isAuthenticated()) {\n                return next();\n            }\n            res.status(401).json({\n                message: \"You are not authorized!\",\n                errorCode: 1\n            });\n        }\n        else {\n            next();\n        }\n    });\n    map(([apiUrl, handlers]) => {\n        const apiUrlWithPrefix = `${APP_CONFIG.app.apiSuffix}${apiUrl}`;\n        map(([method, handler]) => {\n            server[method](apiUrlWithPrefix, handler);\n        }, toPairs(handlers));\n    }, toPairs(routes));\n    server.get('*', (req, res) => {\n        res.status(200).sendFile(path.resolve(__dirname + '/../../../frontend/dist/index.html'));\n    });\n    return server;\n};\nexport const server = createExpressServer();\n"]}