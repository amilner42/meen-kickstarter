{"version":3,"sources":["../../../src/passport-local-auth-strategies.js"],"names":["kleen","usernameField","correctPassword","user","password","register","email","salt","passwordAsHash","then","Users","save","loginStrategy","next","retrievedUser","userLoginStructure","objectProperties","primitiveType","kindOfPrimitive","string","typeFailureError","message","errorCode","internalError","restriction","Promise","resolve","reject","toLowerCase","findOne","userInDB","noAccountExistsForEmail","incorrectPasswordForEmail","validModel","catch","err","signUpStrategy","userSignUpStructure","invalidEmail","emailAddressAlreadyRegistered","invalidPassword"],"mappings":"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","file":"passport-local-auth-strategies.js","sourcesContent":["import { compareSync, genSaltSync, hashSync } from 'bcryptjs';\nimport { Strategy } from 'passport-local';\nimport { collection } from './db';\nimport { validEmail, validPassword } from './validifier';\nimport { errorCodes } from './types';\nimport * as kleen from \"kleen\";\nconst usernameField = \"email\";\nconst correctPassword = (user, password) => {\n    return compareSync(password, user.password);\n};\nconst register = (email, password) => {\n    const salt = genSaltSync(10);\n    const passwordAsHash = hashSync(password, salt);\n    const user = {\n        email: email,\n        password: passwordAsHash\n    };\n    return collection('users')\n        .then((Users) => Users.save(user))\n        .then(() => user);\n};\nexport const loginStrategy = new Strategy({ usernameField }, (email, password, next) => {\n    let retrievedUser;\n    const userLoginStructure = {\n        objectProperties: {\n            email: {\n                primitiveType: kleen.kindOfPrimitive.string,\n                typeFailureError: {\n                    message: \"Email must be a string!\",\n                    errorCode: errorCodes.internalError\n                }\n            },\n            password: {\n                primitiveType: kleen.kindOfPrimitive.string,\n                typeFailureError: {\n                    message: \"Password must be a string\",\n                    errorCode: errorCodes.internalError\n                }\n            }\n        },\n        restriction: (user) => {\n            return new Promise((resolve, reject) => {\n                user.email = user.email.toLowerCase();\n                return collection('users')\n                    .then((Users) => {\n                    return Users.findOne({ email: user.email });\n                })\n                    .then((userInDB) => {\n                    if (!userInDB) {\n                        reject({\n                            message: \"No account exists for that email address\",\n                            errorCode: errorCodes.noAccountExistsForEmail\n                        });\n                    }\n                    return userInDB;\n                })\n                    .then((userInDB) => {\n                    if (!correctPassword(userInDB, user.password)) {\n                        reject({\n                            message: \"Incorrect password for that email address\",\n                            errorCode: errorCodes.incorrectPasswordForEmail\n                        });\n                    }\n                    retrievedUser = userInDB;\n                    resolve();\n                });\n            });\n        },\n        typeFailureError: {\n            message: \"User object must have a email and password.\",\n            errorCode: errorCodes.internalError\n        }\n    };\n    kleen.validModel(userLoginStructure)({ email, password })\n        .then(() => {\n        return next(null, retrievedUser);\n    })\n        .catch((err) => {\n        if (err.errorCode) {\n            return next(null, false, err);\n        }\n        return next(err);\n    });\n});\nexport const signUpStrategy = new Strategy({ usernameField }, (email, password, next) => {\n    const userSignUpStructure = {\n        objectProperties: {\n            email: {\n                primitiveType: kleen.kindOfPrimitive.string,\n                typeFailureError: {\n                    message: \"Email must be a string\",\n                    errorCode: errorCodes.invalidEmail\n                },\n                restriction: (email) => {\n                    return new Promise((resolve, reject) => {\n                        email = email.toLowerCase();\n                        if (!validEmail(email)) {\n                            reject({\n                                message: \"Invalid email\",\n                                errorCode: errorCodes.invalidEmail\n                            });\n                            return;\n                        }\n                        return collection('users')\n                            .then((Users) => {\n                            return Users.findOne({ email });\n                        })\n                            .then((user) => {\n                            if (user) {\n                                reject({\n                                    message: \"Email address already registered\",\n                                    errorCode: errorCodes.emailAddressAlreadyRegistered\n                                });\n                                return;\n                            }\n                            resolve();\n                            return;\n                        });\n                    });\n                }\n            },\n            password: {\n                primitiveType: kleen.kindOfPrimitive.string,\n                typeFailureError: {\n                    message: \"Password must be a string\",\n                    errorCode: errorCodes.invalidPassword\n                },\n                restriction: (password) => {\n                    if (!validPassword(password)) {\n                        return Promise.reject({\n                            message: 'Password not strong enough',\n                            errorCode: errorCodes.invalidPassword\n                        });\n                    }\n                }\n            }\n        },\n        typeFailureError: {\n            message: \"User object must have an email and password\",\n            errorCode: errorCodes.internalError\n        }\n    };\n    return kleen.validModel(userSignUpStructure)({ email, password })\n        .then(() => {\n        return register(email, password);\n    })\n        .then((user) => {\n        return next(null, user);\n    })\n        .catch((err) => {\n        if (err.errorCode) {\n            return next(null, false, err);\n        }\n        return next(err);\n    });\n});\n"]}